#include <stdio.h>
#include <stdbool.h>

// Process structure
typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    bool completed;     // Indicates if the process has completed execution
} Process;

// Function to find the process with the highest priority
int findHighestPriorityProcess(Process processes[], int n, int current_time) {
    int highest_priority_index = -1;
    int highest_priority = -1;
	int i; // Initialize with a low value
    
    // Iterate through all processes to find the one with the highest priority
    for (i = 0; i < n; i++) {
        if (!processes[i].completed && processes[i].arrival_time <= current_time && processes[i].priority > highest_priority) {
            highest_priority_index = i;
            highest_priority = processes[i].priority;
        }
    }
    
    return highest_priority_index;
}

// Function to execute the processes using Priority Scheduling
void executePriority(Process processes[], int n) {
    int current_time = 0;
    
    // Loop until all processes are completed
    while (true) {
        int highest_priority_index = findHighestPriorityProcess(processes, n, current_time);
        
        // If no process is found, exit the loop
        if (highest_priority_index == -1)
            break;
        
        // Execute the process with the highest priority
        printf("Executing process %d at time %d\n", processes[highest_priority_index].process_id, current_time);
        current_time += processes[highest_priority_index].burst_time;
        processes[highest_priority_index].completed = true;
    }
}

int main() {
    // Number of processes
    int n,i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    // Array to store processes
    Process processes[n];
    
    // Input process details
    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        processes[i].completed = false;
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
    }
    
    // Execute the processes using Priority Scheduling
    executePriority(processes, n);
    
    return 0;
}
