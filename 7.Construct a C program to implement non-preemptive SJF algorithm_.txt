#include <stdio.h>
#include <stdbool.h>
typedef struct 
{
    int process_id;
    int arrival_time;
    int burst_time;
    bool completed;
} Process;

// Function to find the process with the shortest burst time
int findShortestJob(Process processes[], int n, int current_time) 
{
    int shortest_job_index = -1;
    int shortest_burst_time = 999999;
	int i; // Initialize with a large value
    
    // Iterate through all processes to find the one with the shortest burst time
    for (i = 0; i < n; i++) {
        if (!processes[i].completed && processes[i].arrival_time <= current_time && processes[i].burst_time < shortest_burst_time) {
            shortest_job_index = i;
            shortest_burst_time = processes[i].burst_time;
        }
    }
    
    return shortest_job_index;
}

// Function to execute processes using non-preemptive SJF scheduling
void executeSJF(Process processes[], int n) 
{
    int current_time = 0;
    int completed_processes = 0;
    int i;
    
    // Loop until all processes are completed
    while (completed_processes < n) 
	{
        int shortest_job_index = findShortestJob(processes, n, current_time);
        
        // If no process is found, move time forward to the next process arrival
        if (shortest_job_index == -1) 
		{
            int next_arrival_time = 999999; // Initialize with a large value
            
            // Find the next arrival time
            for (i = 0; i < n; i++) 
			{
                if (!processes[i].completed && processes[i].arrival_time > current_time && processes[i].arrival_time < next_arrival_time) 
				{
                    next_arrival_time = processes[i].arrival_time;
                }
            }
            
            current_time = next_arrival_time;
        } 
		else 
		{
            printf("Executing process %d at time %d\n", processes[shortest_job_index].process_id, current_time);
            current_time += processes[shortest_job_index].burst_time;
            processes[shortest_job_index].completed = true;
            completed_processes++;
        }
    }
}

int main() 
{
    
    int n,i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];
    printf("Enter arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) 
	{
        processes[i].process_id = i + 1;
        processes[i].completed = false;
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
    }
    executeSJF(processes, n);
    
    return 0;
}
